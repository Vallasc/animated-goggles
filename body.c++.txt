/*#ifndef BODY_H
#define BODY_H
*/
#include <iostream>
#include <math.h>

double G = 6.67;

using namespace std;
class Body{

    public:
    Body(double* position_, double* velocity_, double radius_, double mass_):mass(mass_)
    {acceleration[0]=0; acceleration[1]=0;
    velocity[0]=velocity_[0]; velocity[1]=velocity_[1];
    position[0]=position_[0]; position[1]=position_[1];
    radius=radius_;};



    double position[2];
    double acceleration[2]; 
    double radius;
    double velocity[2];
    const double mass;
    //double E_k=0.5*mass*(pow(velocity[0], 2)+pow(velocity[1], 2));
    //double E_t;
    double volume=4/3*M_PI*pow(radius,3);

    

    
};

double distance(const Body &a, const Body &b)
{
     return sqrt(pow(a.position[0]-b.position[0],2) + pow(a.position[1]-b.position[1],2));
}

void force(Body &a, Body &b)
{
    double f=(G*b.mass*a.mass)/(pow(distance(a,b), 3));
    double fx_a=f*(a.position[0]-b.position[0]);//forza lungo x agente su a
    double fy_a=f*(a.position[1]-b.position[1]); //forza lungo y agente su a

    a.acceleration[0]+=fx_a/(a.mass);
    a.acceleration[1]+=fy_a/(a.mass);

    b.acceleration[0]-=fx_a/(b.mass);//uso il meno per il terzo prin di newton
    b.acceleration[1]-=fx_a/(b.mass);//same
}


int main(){

    double pos[]{1,2};
    double pos1[]{2,5};
    double vel[]{3,4};
    Body g(pos,vel,7,8);
    Body h(pos1,vel,7,8);
    cout << distance(g, h) << endl;
    force(g,h);
    cout<<g.acceleration[0]<<endl;

}



//#endif